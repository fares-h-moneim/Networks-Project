//
// Generated file, do not edit! Created by opp_msgtool 6.0 from Message.msg.
//

#ifndef __MESSAGE_M_H
#define __MESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class Message;
// cplusplus {{
#include <bitset>
typedef  std::bitset<8> bits;
typedef  std::bitset<4> error;
// }}

/**
 * Class generated from <tt>Message.msg:27</tt> by opp_msgtool.
 * <pre>
 * packet Message
 * {
 *     \@customize(true);  // see the generated C++ header for more info
 *     int Seq_Num; //The Header
 *     int FrameType; //Frame Type where Data = 0, ACK = 1 and NACK = 2
 *     int ACK_NACK_Number; //Ack numbers are set as the sequence number of the next expected frame
 *                         //nack numbers are set as the sequence number of the erroneous frame
 *     string Payload; //payload
 *     char Checksum; //Checksum
 * }
 * </pre>
 *
 * Message_Base is only useful if it gets subclassed, and Message is derived from it.
 * The minimum code to be written for Message is the following:
 *
 * <pre>
 * class Message : public Message_Base
 * {
 *   private:
 *     void copy(const Message& other) { ... }

 *   public:
 *     Message(const char *name=nullptr, short kind=0) : Message_Base(name,kind) {}
 *     Message(const Message& other) : Message_Base(other) {copy(other);}
 *     Message& operator=(const Message& other) {if (this==&other) return *this; Message_Base::operator=(other); copy(other); return *this;}
 *     virtual Message *dup() const override {return new Message(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from Message_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(Message)
 * </pre>
 */
class Message_Base : public ::omnetpp::cPacket
{
  protected:
    int Seq_Num = 0;
    int FrameType = 0;
    int ACK_NACK_Number = 0;
    omnetpp::opp_string Payload;
    char Checksum = 0;

  private:
    void copy(const Message_Base& other);

  protected:
    bool operator==(const Message_Base&) = delete;
    // make constructors protected to avoid instantiation
    // make assignment operator protected to force the user override it
    Message_Base& operator=(const Message_Base& other);

  public:
    virtual ~Message_Base();
    Message_Base(const char *name=nullptr, short kind=0);
    Message_Base(const Message_Base& other);
    virtual Message_Base *dup() const override {return new Message_Base(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getSeq_Num() const;
    virtual void setSeq_Num(int Seq_Num);

    virtual int getFrameType() const;
    virtual void setFrameType(int FrameType);

    virtual int getACK_NACK_Number() const;
    virtual void setACK_NACK_Number(int ACK_NACK_Number);

    virtual const char * getPayload() const;
    virtual void setPayload(const char * Payload);

    virtual char getChecksum() const;
    virtual void setChecksum(char Checksum);
};


namespace omnetpp {

inline any_ptr toAnyPtr(const bits *p) {if (auto obj = as_cObject(p)) return any_ptr(obj); else return any_ptr(p);}
template<> inline bits *fromAnyPtr(any_ptr ptr) { return ptr.get<bits>(); }
inline any_ptr toAnyPtr(const error *p) {if (auto obj = as_cObject(p)) return any_ptr(obj); else return any_ptr(p);}
template<> inline error *fromAnyPtr(any_ptr ptr) { return ptr.get<error>(); }
template<> inline Message_Base *fromAnyPtr(any_ptr ptr) { return check_and_cast<Message_Base*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __MESSAGE_M_H

